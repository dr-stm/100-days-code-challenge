# -*- coding: utf-8 -*-
"""Day 4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18p5dE_kwtUn8DKyOTbh2rXQETFjZAVb4

# **CHALLENGE DAY 4**

# Task 1

A magic date is a date where the day multiplied by the month is equal to the two digit year.

For example, June 10, 1960 is a magic date because June is the sixth month, and 6 times 10 is 60, which is equal to the two digit year. Write a function that determines whether or not a date is a magic date.

Use your function to create a main program that finds and displays all of the magic dates in the 20th century.
"""

#defining the function of the program
def date(day, month, year):
  if day * month == int(str(year)[2:4]):  #extracting the last two digits of the year and testing against the product of day and month
    return True
  else:
    return False

def main():
  try: #using try to prevent the program from crashing if user enters a non-digit input

      #asking user to enter year and further filtering out entries that do not correspond to the 20th century
      year = int(input("Please enter the year: "))
      if year not in range(1900,2000):
        print("Please enter a valid 20th century year")
      
      #for entries correctly in 20th century, the user enters the month
      else:
        month = int(input("Please enter the month in number: "))
        if month not in range(1,13):    #ensuring entered month number is valid i.e. b/w 1 and 12
          print("Please enter a valid month")
        else:  
          day = int(input("Please enter the date: ")) #for valid months, the user enters a day

          if month != 2: #checking if entered month is February or not, if not february, the program proceeds to check for other months
            if month in [1, 3, 5, 7, 8, 10, 12]: #checking if the specified month belongs to the months with 31 number of days
              if day not in range(1,32): #ensuring that only valid days are entered for these months, if not they are filtered out
                print("Please enter a valid date for this month")
              else: #after confirming that date is valid, the program uses the earlier defined function to test if its magic or not 
                if date(day, month, year) is True: 
                  print("{}/{}/{} is a magic date".format(day, month, year))
                else:
                  print("{}/{}/{} is NOT a magic date".format(day, month, year))
            
            elif month in [4, 6, 9, 11]: #checking if the specified month belongs to the months with 30 number of days
              if day not in range(1,31): #ensuring that only valid days are entered for these months, if not they are filtered out
                print("Please enter a valid date for this month")
              else: #after confirming that date is valid, the program uses the earlier defined function to test if its magic or not
                if date(day, month, year) is True:
                  print("{}/{}/{} is a magic date".format(day, month, year))
                else:
                  print("{}/{}/{} is NOT a magic date".format(day, month, year))

          else: #this means that the month is February
            if year % 4 == 0: #checking if the year is a leap year
              if day not in range(1,30): #as a leap year, valid dates will extend to 29
                print("Please enter a valid date for this month")
              else: #after confirming that date is valid, the program uses the earlier defined function to test if its magic or not
                if date(day, month, year) is True:
                  print("{}/{}/{} is a magic date".format(day, month, year))
                else:
                  print("{}/{}/{} is NOT a magic date".format(day, month, year))

            else: #year is not a leap year so valid dates for the month will be from 1-28
              if day not in range(1,29): #ensuring that only valid days are entered for these months, if not they are filtered out
                print("Please enter a valid date for this month")
              else: #after confirming that date is valid, the program uses the earlier defined function to test if its magic or not
                if date(day, month, year) is True:
                  print("{}/{}/{} is a magic date".format(day, month, year))
                else:
                  print("{}/{}/{} is NOT a magic date".format(day, month, year))

  except:
    print("Please enter a valid input") #value to print if a wrong character is inputted at the begining of the program

main()

"""# Task 2

Create a program that reads a duration from the user as a number of days, hours,
minutes, and seconds. Compute and display the total number of seconds represented by this duration
"""

#asking user to enter the respective inputs
days = int(input("Enter the number of days: "))
hours = int(input("Enter the number of hours: "))
minutes = int(input("Enter the number of minutes: "))
seconds = int(input("Enter the number of seconds: "))

#defining formula for calculating number of seconds in a given time frame
def duration_in_seconds(days, hours, minutes, seconds):
  duration = (days * 24 * 60 * 60) + (hours * 60 * 60) + (minutes * 60) + seconds
  return duration

#printing the result
print("\n")
print("The total number of seconds in your entered time is", \
      duration_in_seconds(days, hours, minutes, seconds), "seconds")