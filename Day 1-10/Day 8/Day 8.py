# -*- coding: utf-8 -*-
"""Day 8

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/186VzjpNkiXafGFj-pNT4lsw15TbGDF-c

# **CHALLENGE DAY 8**

# Task 1

Positions on a chess board are identified by a letter and a number.

The letter identifies the column, while the number identifies the row, as shown below: (See folder for image)

Write a program that reads a position from the user.

Use an if statement to determine if the column begins with a black square or a white square.

Then use modular arithmetic to report the color of the square in that row.

For example, if the user enters a1 then your program should report that the square is black. If the user enters d5 then your program should report that the square is white.

Your program may assume that a valid position will always be entered. It does not need to perform any error checking
"""

# asking user to enter input
chess_coordinate = input("Please enter the coordinate label: ")

black_start_columns = ["a", "c", "e", "g"]

if chess_coordinate[0] in black_start_columns:
  print("The column starts with black")
else:
  print("The column starts with white")

# specifying dictionary to use for conversion of the first character in the input
column_dict = {"a":"1", "b":"2", "c":"3", "d":"4", "e":"5", "f":"6", "g":"7", "h":"8"}

# specifying the column as a number by replacing the first character of the input ...
# with the dictionary value and then converting back to integer.
# Dictionary was not specified as integer because the replace function requires the ...
# second argument to be a string
col = int(chess_coordinate[0].replace(chess_coordinate[0],\
                                   column_dict.get(chess_coordinate[0])))

# specifying the row of the cell from the entry and converting to integer for arithmetric purposes
row = int(chess_coordinate[1])

# using arithmetric to prime for the conditional statement
# this is because when you add up the row_index and the column_index of the chess board
# index will be based on natural numbers only; cells with even numbers will be coloured black
# while the odd numbered cells are coloured white
cell_position = col + row

# specifying the conditionals and output to be printed
if cell_position % 2 == 0:
  print("The coordinate is black")
else:
  print("The coordinate is white")
