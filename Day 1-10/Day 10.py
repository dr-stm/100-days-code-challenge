# -*- coding: utf-8 -*-
"""Day 10

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1quTl6HjBkcWM_rMVv3yHIGPTCRjAo1yj

# **CHALLENGE DAY 10**

# Task 1

Write a function that determines whether or not a list of values is in sorted order (either ascending or descending).

The function should return True if the list is already sorted. Otherwise it should return False.

Write a main program that reads a list of numbers from the user and then uses your function to report whether or not the list is sorted.
"""

#using try/except to prevent the program from crashing if wrong input is entered
try:
  user_input = int(input("Please enter a list of numbers, enter '0' to end: ")) #asking user to enter input

  user_list = []      #initiating list

  #giving condition for poulating the list
  while user_input != 0:
    user_list.append(user_input)   #updating the list using append function
    try:   #using try/except to return error message if wrong input is entered in subsequent opportunities
      user_input = int(input("Please enter a list of numbers, enter space to end: "))
    except:
      print("Please enter a valid input")

  #defining true or false conditions
  if user_list == sorted(user_list):
    print(True)
  elif user_list == sorted(user_list, reverse=True):
    print(True)
  else:
    print(False)

except:
  print("Please enter a valid input")

"""# Task 2

On some basic cell phones, text messages can be sent using the numeric keypad.

Because each key has multiple letters associated with it, multiple key presses are needed for most letters.

Pressing the number once generates the first letter on the key.

Pressing the number 2, 3, 4 or 5 times generates the second, third, fourth or fifth character listed for that key.

Write a program that displays the key presses that must be made to enter a text
message read from the user.

Construct a dictionary that maps from each letter or symbol to the key presses.
Then use the dictionary to generate and display the presses for the user’s message.

For example, if the user enters Hello, World! then your program should output 4433555555666110966677755531111.

Ensure that your program handles both uppercase and lowercase letters.
Ignore any characters that aren’t listed in the table above such as semicolons and brackets.

The key and symbols are below:

1 = . , ? ! :

2 = A B C

3 = D E F

4 = G H I

5 = J K L

6 = M N O 

7 = P Q R S

8 = T U V

9 = W X Y Z

0 = *space*
"""

#defining the dictionary for the program as stipulated
keypad = {
    "1" : ['.', ',', '?', '!', ':'],
    "2" : ['A', 'B', 'C'],
    "3" : ['D', 'E', 'F'],
    "4" : ['G', 'H', 'I'],
    "5" : ['J', 'K', 'L'],
    "6" : ['M', 'N', 'O'],
    "7" : ['P', 'Q', 'R', 'S'],
    "8" : ['T', 'U', 'V'],
    "9" : ['W', 'X', 'Y', 'Z'],
    "0" : [' ']
    }

#asking user to enter any content and changing all entries to uppercase since dictionary is in uppercase
text = input("Please input a text so I can show you how to type it on your phone: ").upper()

key_result = ""     #initiating the final result
keys = list(keypad.items())   #raising the items of the dictionary as a list fo reasy iteration


for i in range(len(text)):                        #extracting out each item in the entry as a number
    for j in range(len(keys)):                    #extracting each dictionary key as a number too
        for k in range(len(keys[j][1])):          #extracting out each item in the specifically looped dictionary value of a key-value pair
            if text[i] == keys[j][1][k]:          #assessing if the current loop item is equal to the assessed item
                key_result+=((k+1)*keys[j][0])    #if so, the key of that value is printed and repeated by the number of times (k+1) using multiplication operand

print(key_result)       #printing output

