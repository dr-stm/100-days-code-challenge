# -*- coding: utf-8 -*-
"""Day 27

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c6PPShfkNAnOlla58UG9vWms0wKmEVw7

# **CHALLENGE DAY 27**
"""

"""
TASK 1
An integer, n, is said to be perfect when the sum of all of the proper divisors of n is
equal to n. For example, 28 is a perfect number because its proper divisors are 1, 2,
4, 7 and 14, and 1 + 2 + 4 + 7 + 14 = 28.
Write a function that determines whether or not a positive integer is perfect. Your
function will take one parameter. If that parameter is a perfect number then your function will return true.
Otherwise it will return false. In addition, write a main program
that uses your function to identify and display all of the perfect numbers between 1
and 10,000.
"""

#defining function of proper divisors that takes an entered number as its only argument
def prop_div(user_num):
  proper_divisors = []      #initiating the list of the proper divisors
  for num in range(1,user_num):   #evaluating each integer less than the entered number
    if user_num % num == 0:     #condition for a number to be a proper divisor
      proper_divisors.append(num)   #adding a proper divisor to the output list
  return proper_divisors

#defining main function
def main():
  
  #using try/except to prevent the program from crashing
  try:
    user_num = int(input("Please enter a positive number: ")) #calling user to enter number
    
    #ensuring that only positive numbers are accepted
    if user_num <= 0:
      print("\nPlease enter a positive number.")
    
    else:
      proper_divisors = prop_div(user_num)    #activating the function
      print(f"\nThe proper_divisors of {user_num} is/are: {proper_divisors}\n")
      
      #defining conditions for a perfect number
      if sum(proper_divisors) == user_num:
        print(True)
      else:
        print(False)

  except:
    print("\nPlease enter a valid positive number")

if __name__ == "__main__":    #activating the main function
  main()

"""
TASK 2
Write a program that reads numbers from the user until a blank line is entered. Your
program should display the average of all of the values entered by the user. Then
the program should display all of the below average values, followed by all of the
average values (if any), followed by all of the above average values. An appropriate
label should be displayed before each list of values.
"""

#user try/except to prevent program from crashing if a wrong input is entered
try:

  #asking user to enter the first value
  entry = input("Enter a number (hit enter button to end): ").strip()

  #initiating all necessary lists
  entered_numbers = []
  below_average = []
  equals_average = []
  above_average = []


  #giving vondition for entry to continue or to stop
  while entry != "":
    entered_numbers.append(int(entry))    #attaching entered number to the comprehensive list
    entry = input("Enter a number (hit enter button to end): ").strip()   #asking user to enter another number

  average_numbers = sum(entered_numbers)/len(entered_numbers)   #calculating the average

  #using loop to distribute all entered numbers accordingly
  for num in entered_numbers:
    if num < average_numbers:
      below_average.append(num)
    elif num == average_numbers:
      equals_average.append(num)
    else:
      above_average.append(num)

  #printing output
  print("\nEntered numbers: ", entered_numbers)
  print(f"Average: {average_numbers:.2f}\n")
  print("Below average: ", below_average)
  print("Equals average: ", equals_average)
  print("Above average: ", above_average)

except:
  print("Please enter a valid number or hit the enter button to end")