# -*- coding: utf-8 -*-
"""Day 24

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10CnOITOAOnrNQ1PumQXQklZK7K3l7YXc

# **CHALLENGE DAY 24**
"""

"""
TASK 1
Write a program that begins by reading a radius, r, from the user. The program will
continue by computing and displaying the area of a circle with radius r and the
volume of a sphere with radius r. Use the pi constant in the math module in your
calculations.
Hint: The area of a circle is computed using the formula area = πr2. The
volume of a sphere is computed using the formula volume = 4/3πr3.
"""

#importing math module
from math import pi

#using try/except to prevent program from crashing
try:
  #asking user to enter radius
  radius = float(input("Enter the radius: "))

  #making sure that only positive values are accepted as radius
  if radius <= 0:
    print("Please enter a valid radius length (it can only be a positive number.")

  else:
    circle_area = pi * (radius**2)  #formula for area of a circle
    sphere_volume = (4/3)*pi*(radius**3)    #formula for volume of a sphere

    #printing output
    print(f"The area of the circle is {circle_area:.2f} and the volume of the sphere is {sphere_volume:.2f}.")

except ValueError as err:
  print(f"{err} is not a valid number, please enter a valid radius")

"""
TASK 2
At a particular company, employees are rated at the end of each year. The rating scale
begins at 0.0, with higher values indicating better performance and resulting in larger
raises. The value awarded to an employee is either 0.0, 0.4, or 0.6 or more. Values
between 0.0 and 0.4, and between 0.4 and 0.6 are never used. The meaning associated
with each rating is shown in the following table. The amount of an employee’s raise
is $2400.00 multiplied by their rating

RATING      |   MEANING
0.0         |   Unacceptable performance
0.4         |   Acceptable performance
0.6 or more |   Meritorious performance

Write a program that reads a rating from the user and indicates whether the performance
 was unacceptable, acceptable or meritorious. The amount of the employee’s
raise should also be reported. Your program should display an appropriate error
message if an invalid rating is entered.
"""

#using try/except to prevent program from crashing
try:
  #asking user to enter the rating and calculating the raise amount from it
  rating = float(input("Enter the employee's rating: "))
  raise_amount = 2400.00 * rating

  #making sure that only positive entries are entered into the conditions
  if rating < 0:
    print("Please enter a valid rating")
  
  #defining output for the various conditions of the rating scores that are 0 or positive
  else:
    if rating == 0:
      rating_meaning = "Unacceptable"
      print(f"Oh no, this rating is '{rating_meaning}' and the raise is ${raise_amount:.2f}.")

    elif rating > 0 and rating < 0.4:
      print("Please enter a valid rating")

    elif rating == 0.4:
      rating_meaning = "Acceptable"
      print(f"Good enough, this rating is '{rating_meaning}' and the raise is ${raise_amount:.2f}.")

    elif rating > 0.4 and rating < 0.6:
      print("Please enter a valid rating")
  
    else:
      rating_meaning = "Meritorious"
      print(f"Great! This rating is '{rating_meaning}' and the raise is ${raise_amount:.2f}.")

except ValueError:
  print("Please enter a valid rating number")

"""
TASK 3
In this exercise you will create a program that displays a multiplication table that
shows the products of all combinations of integers from 1 times 1 up to and including
10 times 10. Your multiplication table should include a row of labels across the top
of it containing the numbers 1 through 10. It should also include labels down the left
side consisting of the numbers 1 through 10. The expected output from the program
is shown below:

      1   2   3   4   5   6   7   8   9   10
  1   1   2   3   4   5   6   7   8   9   10
  2   2   4   6   8   10  12  14  16  18  20
  3   3   6   9   12  15  18  21  24  27  30
  4   4   8   12  16  20  24  28  32  36  40
  5   5   10  15  20  25  30  35  40  45  50
  6   6   12  18  24  30  36  42  48  54  60
  7   7   14  21  28  35  42  49  56  63  70
  8   8   16  24  32  40  48  56  64  72  80
  9   9   18  27  36  45  54  63  72  81  90
  10  10  20  30  40  50  60  70  80  90  100

When completing this exercise you will probably find it helpful to be able to
print out a value without moving down to the next line. This can be accomplished
by added end="" as the last parameter to your print statement. For example,
print("A") will display the letter A and then move down to the next line. The
statement print("A", end="") will display the letter A without moving down
to the next line, causing the next print statement to display its result on the same line
as the letter A.
"""

#printing the column headers
print("      ", end = "")
for i in range(1,11):
  print("%4d" %i, end="")
print("\n")
  
#printing the row headers
for p in range(1,11):
  print("%4d" %p, " ", end="")
  
  #printing out the multiplication values
  for q in range (1,11):
    mult = p*q
    print("%4d" %mult, end="")
  print()

