# -*- coding: utf-8 -*-
"""Day 28

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jqBcUN3e2JMShRUOfQ8ShSuLg5fhQAU7

# **CHALLENGE DAY 28**
"""

"""
TASK 1

Create a program that determines and displays the number of unique characters in a
string entered by the user. For example, Hello, World! has 10 unique characters
while zzz has only one unique character. Use a dictionary or set to solve this problem.
"""

#calling user to enter text
user_text = input("Enter a text to know how many unique characters in it: ")

#initiating list to house all items in the entered text
unique_list = []

#adding each item in the text to the list
for item in user_text:
  unique_list.append(item)

#printing unique characters by counting the numbers of characters in the SET of the list
print(f"\nThe number of unique characters in your entry is {len(set(unique_list))}.")

"""
TASK 2

Two words are anagrams if they contain all of the same letters, but in a different
order. For example, “evil” and “live” are anagrams because each contains one e, one
i, one l, and one v. Create a program that reads two strings from the user, determines
whether or not they are anagrams, and reports the result.

EXTENDED PART OF THE TASK
The notion of anagrams can be extended to multiple words. For example, “William
Shakespeare” and “I am a weakish speller” are anagrams when capitalization and
spacing are ignored.66 6 Dictionary Exercises
Extend your program from Exercise 135 so that it is able to check if two phrases
are anagrams. Your program should ignore capitalization, punctuation marks and
spacing when making the determination.
"""

#initiating program via communications
print("We will be checking if two words or sentences that you enter are anagrams")
print("Anagrams are two words or sentences that contain exactly same letters in different orders")

#asking user to enter the words or sentences to be checked
word_1 = input("\nEnter the first word or sentence: ").lower().strip()
word_2 = input("Enter the second word or sentence: ").lower().strip()

#continuing the program communications
print("\nNow let's see if they are anagrams\n")

#initiating the list for each of the items of the respective words or sentences
word_1_list = []
word_2_list = []

#assessing each item in the first entry
for item in word_1:
  if item.isalpha():    #filtering in only alphabets and taking off punctuation marks
    word_1_list.append(item)  #adding alphabets to the list
  else:
    pass

#assessing each item in the second entry
for item in word_2:
  if item.isalpha():        #filtering in only alphabets and taking off punctuation marks
    word_2_list.append(item)  #adding alphabets to the list
  else:
    pass

#using sorted to test for anagrams since their sorted lists should be the same
#and printing the appropriate output
if sorted(word_1_list) == sorted(word_2_list):
  print("Voila, they are anagrams")
else:
  print("Oh no, they are not anagrams")

"""
TASK 3

In this exercise you will create a program that identifies all of the words in a string
entered by the user. Begin by writing a function that takes a string of text as its only
parameter. Your function should return a list of the words in the string with the
punctuation marks at the edges of the words removed. The punctuation marks that you must
remove include commas, periods, question marks, hyphens, apostrophes, exclamation points,
colons, and semicolons. Do not remove punctuation marks that appear in
the middle of a words, such as the apostrophes used to form a contraction.
For example, if your function is provided with the string "Examples of contractions
include: don’t, isn’t, and wouldn’t." then your function should
return the list ["Examples", "of", "contractions", "include",
"don’t", "isn’t", "and", "wouldn’t"].

Write a main program that demonstrates your function. It should read a string
from the user and display all of the words in the string with the punctuation marks
removed.
"""

#defining function to perform given task - generating a list of only words
def only_words(sentence):

  #defining list of punctuations to be removed from edges
  punctuation_to_remove = [".", ",", "?", "-", "!", ":", ";", "'"]

  #splitting the entered sentence from the white spaces
  sentence_list = sentence.split(" ")


  #looping through each word of the sentence
  for i in range(len(sentence_list)):

    #making sure that a word with both right and left edges are pulled into the loop and not performing only one edge and leaving the other
    while sentence_list[i][0] in punctuation_to_remove or sentence_list[i][-1] in punctuation_to_remove:
      
      #assessing the first character of each word (left edge) to check if it's a punctuation mark
      #if so, a new word where it is replaced by a dead space is created
      #a new variable is created because strings are immutable and replacement of character will not change the old string
      if sentence_list[i][0] in punctuation_to_remove:
        new_elem = sentence_list[i].replace(sentence_list[i][0], "")
        sentence_list[i] = new_elem #replacing the old word in the list with the new word

      #same as above but assesses the last character (right edge) of each word
      elif sentence_list[i][-1] in punctuation_to_remove:
        new_elem = sentence_list[i].replace(sentence_list[i][-1], "")
        sentence_list[i] = new_elem

    #for words without any punctuation mark at its edge
    else:
      pass

  #returning the final list
  return sentence_list
    
#defining the main function
def main():

  #asking user to enter input
  sentence = input("Enter a sentence: ")

  #activating the created function
  only_words_list = only_words(sentence)

  #printing output
  print(f"\n{only_words_list}")

#activating main function
if __name__ == "__main__":
  main()