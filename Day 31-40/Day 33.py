# -*- coding: utf-8 -*-
"""Day 33

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/120Mwgj76U330-j0NNU15DyBljiVjzSYi
"""

"""
TASK 1

In this exercise you will create a function named nextPrime that finds and returns
the first prime number larger than some integer, n. The value of n will be passed to
the function as its only parameter. Include a main program that reads an integer from
the user and displays the first prime number larger than the entered value.
"""


#defining function to determine prime number
def prime(next_prime):
  
  #filtering out numbers less than or equal to 1, based on the instruction's specifications
  if next_prime <= 1:
    return False

  #for valid entries
  else:

    #excluding 1 and the number itself, and checking if there is any other number within its lower range
    #that can completely divide it, making it not to be a prime number
    #if there is not, then the entry is a prime number
    for num in range (2,next_prime):
      if next_prime % num == 0:
        return False
      else:
        return True

#defining main function
def main():

  #using try/except to prevent program from crashing
  try:
    #calling user to enter integer
    user_num = int(input("Enter an integer: "))
    
    #raising the first integer after the entered number to be tested
    next_prime = user_num + 1

    #giving condition for the function to keep testing until the next prime is gotten
    while prime(next_prime) == False:
      next_prime += 1

    #print output
    else:
      print(f"\nThe next prime integer to {user_num} is {next_prime}.")
  
  #error message for non-numeric entries
  except:
    print("Please enter a valid numeric input")

main()

"""
TASK 2

The following table lists an octave of music notes, beginning with middle C, along
with their frequencies.

NOTE  |   FREQUENCY
C4    |   261.63
D4    |   293.66
E4    |   329.63
F4    |   349.23
G4    |   392.00
A4    |   440.00  
B4    |   493.88

Begin by writing a program that reads the name of a note from the user and
displays the note’s frequency. Your program should support all of the notes listed
previously.

Once you have your program working correctly for the notes listed previously you
should add support for all of the notes from C0 to C8. While this could be done by
adding many additional cases to your if statement, such a solution is cumbersome,
inelegant and unacceptable for the purposes of this exercise. Instead, you should
exploit the relationship between notes in adjacent octaves. In particular, the frequency
of any note in octave n is half the frequency of the corresponding note in octave n+1.
By using this relationship, you should be able to add support for the additional notes
without adding additional cases to your if statement.

Hint: To complete this exercise you will need to extract individual characters
from the two-character note name so that you can work with the letter and
the octave number separately. Once you have separated the parts, compute the
frequency of the note in the fourth octave using the data in the table above.
Then divide the frequency by 2^(4−x), where x is the octave number entered by
the user. This will halve or double the frequency the correct number of times.
"""

note = input("Enter the music note: ").upper().strip()

note_apha = note[0]
note_octave = int(note[1])

if len(note) != 2 or note.isalnum() == False:
  print("Please enter a valid music note")

else:
  if note_apha == "C":
    frequency = 261.63

  elif note_apha == "D":
    frequency = 293.66

  elif note_apha == "E":
    frequency = 329.63

  elif note_apha == "F":
    frequency = 349.23

  elif note_apha == "G":
    frequency = 392.00

  elif note_apha == "A":
    frequency = 440.00

  elif note_apha == "B":
    frequency = 493.88

  frequency = frequency / 2 ** (4 - note_octave)

  print("Frequency = ", frequency)

"""
TASK 3

In the previous question you converted from note name to frequency. In this question
you will write a program that reverses that process. Begin by reading a frequency
from the user. If the frequency is within one Hertz of a value listed in the table in
the previous question then report the name of the note. Otherwise report that the
frequency does not correspond to a known note. In this exercise you only need to
consider the notes listed in the table. There is no need to consider notes from other
octaves.
"""

reverse_frequency = float(input("Enter the frequency of the music note: "))

if reverse_frequency >= 260.63 and reverse_frequency <= 262.63:
  reverse_note = "C4"

elif reverse_frequency >= 292.66 and reverse_frequency <= 294.66:
  reverse_note = "D4"

elif reverse_frequency >= 328.63 and reverse_frequency <= 330.63:
  reverse_note = "E4"

elif reverse_frequency >= 348.23 and reverse_frequency <= 350.23:
  reverse_note = "F4"

elif reverse_frequency >= 391.00 and reverse_frequency <= 393.00:
  reverse_note = "G4"

elif reverse_frequency >= 439.00 and reverse_frequency <= 441.00:
  reverse_note = "A4"

elif reverse_frequency >= 492.88 and reverse_frequency <= 494.88:
  reverse_note = "B4"

else:
  reverse_note = " "

if reverse_note == " ":
  print("\nThis frequency does not correspond to a known note")

else:
  print("\nThe corresponding note is: ", reverse_note)